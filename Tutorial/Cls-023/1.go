// First Order Function Vs Higher Order Function
// Parameter, Argument, First-order Function, Higher-order Function ‡¶∂‡¶ø‡¶ñ‡ßá ‡¶´‡ßá‡¶≤‡¶ø‡•§

// üîπ 1. Parameter (‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞)

// üëâ Function define ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ø‡ßá variable ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü, ‡¶Ø‡ßá‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá input ‡¶ß‡¶∞‡¶æ ‡¶π‡ßü‡•§

// üìå Example (Go):
// package main
// import "fmt"
// func greet(name string) { // <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá "name" ‡¶π‡¶≤‡ßã parameter
//     fmt.Println("Hello,", name)
// }


// ‡¶è‡¶ñ‡¶æ‡¶®‡ßá name ‡¶π‡¶≤‡ßã parameter‡•§ Function declare ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡¶≤‡¶õ‡¶ø:
// üëâ "‡¶è‡¶á function input ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá name ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ string ‡¶®‡ßá‡¶¨‡ßá‡•§"

// üîπ 2. Argument (‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü)

// üëâ Function call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ø‡ßá‡¶á actual value ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡•§

// üìå Example:

// func main() {
//     greet("Rahat") // <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá "Rahat" ‡¶π‡¶≤‡ßã argument
// }


// name = parameter

// "Rahat" = argument

// üîπ 3. First-order Function

// üëâ ‡¶Ø‡ßá‡¶á function ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶á value return ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ö‡¶®‡ßç‡¶Ø function ‡¶ï‡ßá ‡¶®‡¶æ ‡¶®‡ßá‡ßü/‡¶®‡¶æ ‡¶¶‡ßá‡ßü‡•§
// ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ function‡•§

// üìå Example:

// func add(a int, b int) int {
//     return a + b
// }

// func main() {
//     result := add(5, 10) // ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ function call
//     fmt.Println(result)
// }


// add ‡¶π‡¶≤‡ßã first-order function ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ calculation ‡¶ï‡¶∞‡ßá, function ‡¶ï‡ßá argument ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü ‡¶®‡¶æ, function ‡¶ï‡ßá return ‡¶ì ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§

// üîπ 4. Higher-order Function

// üëâ ‡¶Ø‡ßá‡¶á function ‡¶π‡ßü

// ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ function ‡¶ï‡ßá argument ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü,

// ‡¶Ö‡¶•‡¶¨‡¶æ function ‡¶ï‡ßá return ‡¶ï‡¶∞‡ßá‡•§

// üìå Example 1 (function as argument):

// func apply(fn func(int) int, x int) int {
//     return fn(x) // fn ‡¶π‡¶≤‡ßã function parameter
// }

// func square(n int) int {
//     return n * n
// }

// func main() {
//     result := apply(square, 5) // square function ‡¶ï‡ßá argument ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ
//     fmt.Println(result)        // 25
// }


// üìå Example 2 (function return ‡¶ï‡¶∞‡¶æ):

// func multiplier(factor int) func(int) int {
//     return func(x int) int {
//         return x * factor
//     }
// }

// func main() {
//     double := multiplier(2) // ‡¶è‡¶ï‡¶ü‡¶æ function return ‡¶ï‡¶∞‡¶≤‡ßã
//     fmt.Println(double(10)) // 20
// }

// ‚úÖ Summary

// Parameter = function definition ‡¶è input variable ‡¶®‡¶æ‡¶Æ

// Argument = function call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶¶‡ßá‡ßü‡¶æ actual value

// First-order Function = ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ function, ‡¶∂‡ßÅ‡¶ß‡ßÅ value ‡¶®‡ßá‡ßü/‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü

// Higher-order Function = function ‡¶®‡ßá‡ßü ‡¶¨‡¶æ function ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü
package main
import "fmt"

// Parameter vs Argument demo
func greet(name string) { // "name" ‡¶π‡¶≤‡ßã parameter
    fmt.Println("Hello,", name)
}

// First-order function
func add(a int, b int) int {
    return a + b
}

// Higher-order function (function as argument)
func apply(fn func(int) int, x int) int {
    return fn(x) // fn ‡¶π‡¶≤‡ßã function parameter
}

func square(n int) int {
    return n * n
}

// Higher-order function (returning function)
func multiplier(factor int) func(int) int {
    return func(x int) int {
        return x * factor
    }
}

func main() {
    // Parameter vs Argument
    greet("Rahat") // "Rahat" ‡¶π‡¶≤‡ßã argument

    // First-order function
    result1 := add(5, 10)
    fmt.Println("add result:", result1)

    // Higher-order (function as argument)
    result2 := apply(square, 5)
    fmt.Println("apply(square, 5):", result2)

    // Higher-order (function returning function)
    double := multiplier(2)
    fmt.Println("multiplier(2)(10):", double(10))
}


// First Order Function Vs Higher Order Function

// Hello, Rahat
// add result: 15
// apply(square, 5): 25
// multiplier(2)(10): 20
üîπ Step by Step Flow (Simulation)
1. Program ‡¶∂‡ßÅ‡¶∞‡ßÅ

üëâ ‡¶Ø‡¶ñ‡¶® go run ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨‡ßá, Go runtime ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ package (main) load ‡¶ï‡¶∞‡ßá‡•§
main() function ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá, ‡¶è‡¶¨‡¶Ç execution ‡¶∏‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡•§

2. Function Definitions

‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá compiler ‡¶∏‡¶¨ function (greet, add, apply, square, multiplier) register ‡¶ï‡¶∞‡ßá ‡¶®‡ßá‡ßü‡•§
‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ñ‡¶®‡ßã execute ‡¶π‡ßü ‡¶®‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ store ‡¶π‡ßü‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡•§

3. func main()

Execution ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡•§

Line:
greet("Rahat")


Function call ‡¶π‡¶≤‡ßã greet("Rahat")

‡¶è‡¶ñ‡¶æ‡¶®‡ßá "Rahat" ‡¶π‡¶≤‡ßã argument

Function definition ‡¶è name string ‡¶π‡¶≤‡ßã parameter

‡¶§‡¶æ‡¶á ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‚Üí

fmt.Println("Hello,", name)


Output:

Hello, Rahat

Next:
result1 := add(5, 10)


Call ‡¶π‡¶≤‡ßã add(5, 10)

Parameters: a=5, b=10

Function ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‚Üí

return a + b // return 15


‡¶§‡¶æ‡¶á result1 ‡¶è store ‡¶π‡¶≤‡ßã 15

Print ‡¶π‡¶¨‡ßá:

add result: 15

Next:
result2 := apply(square, 5)


Call ‡¶π‡¶≤‡ßã apply(square, 5)

Parameters: fn = square, x = 5

Function apply ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‚Üí

return fn(x) // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá fn = square


So square(5) call ‡¶π‡¶¨‡ßá ‚Üí

return 5 * 5 // 25


Result = 25

Print ‡¶π‡¶¨‡ßá:

apply(square, 5): 25

Next:
double := multiplier(2)


Call ‡¶π‡¶≤‡ßã multiplier(2)

Parameter: factor = 2

Function multiplier return ‡¶ï‡¶∞‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶®‡¶§‡ßÅ‡¶® function:

return func(x int) int {
    return x * factor // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá factor=2 bind ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá (closure)
}


‡¶§‡¶æ‡¶á double ‡¶è‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ function, ‡¶Ø‡¶æ input ‡¶®‡¶ø‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ 2 ‡¶¶‡¶ø‡ßü‡ßá ‡¶ó‡ßÅ‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§

Next:
fmt.Println(double(10))


double(10) call ‡¶π‡¶≤‡ßã ‚Üí

‡¶Ü‡¶∏‡¶≤‡ßá ‡¶è‡¶ü‡¶æ ‡¶π‡¶≤‡ßã ‡¶∏‡ßá‡¶á returned function:

return 10 * 2 // 20


Output ‡¶π‡¶¨‡ßá:

multiplier(2)(10): 20

üîπ Final Output (‡¶™‡ßÅ‡¶∞‡ßã flow ‡¶∂‡ßá‡¶∑‡ßá)
Hello, Rahat
add result: 15
apply(square, 5): 25
multiplier(2)(10): 20

‚úÖ Concept Recap

Parameter = function define ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ø‡ßá ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü (placeholder)

Argument = function call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ø‡ßá actual value ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü

First-order function = add() (‡¶∂‡ßÅ‡¶ß‡ßÅ value ‡¶®‡ßá‡ßü, value ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü)

Higher-order function (takes function as arg) = apply(square, 5)

Higher-order function (returns function) = multiplier(2) ‚Üí return ‡¶ï‡¶∞‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶®‡¶§‡ßÅ‡¶® function
üîπ Callback Function ‡¶ï‡ßÄ?

üëâ Callback function ‡¶π‡¶≤‡ßã ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ argument ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü, ‡¶Ü‡¶∞ ‡¶∏‡ßá‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá‡•§

‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶è‡¶ï‡¶ü‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‚Üí ‡¶∏‡ßá‡¶á‡¶ü‡¶æ‡¶ï‡ßá Callback ‡¶¨‡¶≤‡ßá‡•§

üîπ Go ‡¶§‡ßá Example:
package main

import "fmt"

// callback function type define
func processData(x int, callback func(int)) {
    fmt.Println("Processing data:", x)
    callback(x) // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá callback ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
}

// ‡¶è‡¶ï‡¶ü‡¶æ callback ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
func printSquare(n int) {
    fmt.Println("Square:", n*n)
}

func main() {
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá printSquare ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ï‡ßá callback ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡¶æ‡¶Æ
    processData(5, printSquare)
}

üîπ Output:
Processing data: 5
Square: 25

üîπ Anonymous function ‡¶¶‡¶ø‡ßü‡ßá‡¶ì callback ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü:
package main

import "fmt"

func processData(x int, callback func(int)) {
    fmt.Println("Processing data:", x)
    callback(x)
}

func main() {
    processData(7, func(n int) {
        fmt.Println("Cube:", n*n*n)
    })
}


Output:

Processing data: 7
Cube: 343


‚úÖ Summary:

Callback ‡¶π‡¶≤‡ßã function ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø function ‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡•§

Higher Order Function callback ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

Go ‡¶§‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ callback ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø event, goroutine, channel handling, data processing ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡¶§‡ßá‡•§
/*
1.parameter vs argument
2.first order function 
i.standard function or named function
ii.anonymous function or unnamed function
iii.IIFE (Immediately Invoked Function Expression)
iv.function expression
3.higher order function
4.callback function
5.first class citizen=>variable assign data
*/
üìå Short Notes with Code
1. Parameter vs Argument

Parameter ‚Üí Function er input variable (placeholder).

Argument ‚Üí Function call er somoy je real value pass kori.

package main
import "fmt"

func greet(name string) { // name = parameter
    fmt.Println("Hello,", name)
}

func main() {
    greet("Rahat") // "Rahat" = argument
}
Output:

Hello, Rahat
2. First Order Function
(i) Standard Function / Named Function
package main
import "fmt"

func add(a, b int) int { // Named function
    return a + b
}

func main() {
    fmt.Println("Sum:", add(3, 4))
}
Output:

5
(ii) Anonymous Function (Unnamed Function)
package main
import "fmt"

func main() {
    mul := func(a, b int) int { // anonymous function assigned to variable
        return a * b
    }
    fmt.Println("Multiplication:", mul(5, 6))
}
Output:

12

(iii) IIFE (Immediately Invoked Function Expression)
package main
import "fmt"

func main() {
    result := func(x, y int) int { // declare + call immediately
        return x - y
    }(10, 3)
    fmt.Println("IIFE Result:", result)
}
Output:

24

(iv) Function Expression
package main
import "fmt"

func main() {
    var divide func(int, int) int // declare function type
    divide = func(a, b int) int {
        return a / b
    }
    fmt.Println("Division:", divide(20, 5))
}
Output:
12

3. Higher Order Function

üëâ Function that takes another function as parameter or returns a function.

package main
import "fmt"

func applyOperation(a, b int, op func(int, int) int) int {
    return op(a, b)
}

func main() {
    add := func(x, y int) int { return x + y }
    mul := func(x, y int) int { return x * y }

    fmt.Println("Add:", applyOperation(3, 4, add))
    fmt.Println("Multiply:", applyOperation(3, 4, mul))
}
Output:
7
12

4. Callback Function

üëâ Function ke onno function er parameter hisebe pathano, pore call kora.

package main
import "fmt"

func processMessage(msg string, callback func(string)) {
    fmt.Println("Processing:", msg)
    callback(msg)
}

func main() {
    processMessage("Go is awesome!", func(m string) {
        fmt.Println("Callback received:", m)
    })
}
Output:

Processing: Go is awesome!
Callback received: Go is awesome!


5. First-Class Citizen (Function as Data)

üëâ Function ke variable e assign kora, argument hisebe pathano, ba return kora possible.

package main
import "fmt"

func main() {
    add := func(a, b int) int { return a + b } // function as data
    operation := add
    fmt.Println("Result:", operation(7, 8))
}
Output:

Result: 15



‚úÖ Recap

Parameter = placeholder variable, Argument = real value

First Order Function ‚Üí standard, anonymous, IIFE, function expression

Higher Order Function ‚Üí function ke input/output hishebe use kora

Callback Function ‚Üí ekta function ke onno function call er moddhe execute kora

First Class Citizen ‚Üí function ke variable, parameter, return value hisebe use kora