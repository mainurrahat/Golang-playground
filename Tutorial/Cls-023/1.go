// First Order Function Vs Higher Order Function
// Parameter, Argument, First-order Function, Higher-order Function рж╢рж┐ржЦрзЗ ржлрзЗрж▓рж┐ред

// ЁЯФ╣ 1. Parameter (ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░)

// ЁЯСЙ Function define ржХрж░рж╛рж░ рж╕ржорзЯ ржпрзЗ variable ржирж╛ржо ржжрзЗржУрзЯрж╛ рж╣рзЯ, ржпрзЗржЯрж╛рж░ ржорж╛ржзрзНржпржорзЗ input ржзрж░рж╛ рж╣рзЯред

// ЁЯУМ Example (Go):
// package main
// import "fmt"
// func greet(name string) { // <-- ржПржЦрж╛ржирзЗ "name" рж╣рж▓рзЛ parameter
//     fmt.Println("Hello,", name)
// }


// ржПржЦрж╛ржирзЗ name рж╣рж▓рзЛ parameterред Function declare ржХрж░рж╛рж░ рж╕ржорзЯ ржЖржорж░рж╛ ржмрж▓ржЫрж┐:
// ЁЯСЙ "ржПржЗ function input рж╣рж┐рж╕рзЗржмрзЗ name ржирж╛ржорзЗ ржПржХржЯрж╛ string ржирзЗржмрзЗред"

// ЁЯФ╣ 2. Argument (ржЖрж░рзНржЧрзБржорзЗржирзНржЯ)

// ЁЯСЙ Function call ржХрж░рж╛рж░ рж╕ржорзЯ ржпрзЗржЗ actual value ржжрзЗржУрзЯрж╛ рж╣рзЯред

// ЁЯУМ Example:

// func main() {
//     greet("Rahat") // <-- ржПржЦрж╛ржирзЗ "Rahat" рж╣рж▓рзЛ argument
// }


// name = parameter

// "Rahat" = argument

// ЁЯФ╣ 3. First-order Function

// ЁЯСЙ ржпрзЗржЗ function рж╢рзБржзрзБржЗ value return ржХрж░рзЗ ржмрж╛ ржХрж╛ржЬ ржХрж░рзЗ, ржХрж┐ржирзНрждрзБ ржЕржирзНржп function ржХрзЗ ржирж╛ ржирзЗрзЯ/ржирж╛ ржжрзЗрзЯред
// ржорж╛ржирзЗ, рж╕рж╛ржзрж╛рж░ржг functionред

// ЁЯУМ Example:

// func add(a int, b int) int {
//     return a + b
// }

// func main() {
//     result := add(5, 10) // рж╕рж╛ржзрж╛рж░ржг function call
//     fmt.Println(result)
// }


// add рж╣рж▓рзЛ first-order function ржХрж╛рж░ржг ржПржЯрж╛ рж╢рзБржзрзБ calculation ржХрж░рзЗ, function ржХрзЗ argument рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ ржирж╛, function ржХрзЗ return ржУ ржХрж░рзЗ ржирж╛ред

// ЁЯФ╣ 4. Higher-order Function

// ЁЯСЙ ржпрзЗржЗ function рж╣рзЯ

// ржЖрж░рзЗржХржЯрж╛ function ржХрзЗ argument рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ,

// ржЕржержмрж╛ function ржХрзЗ return ржХрж░рзЗред

// ЁЯУМ Example 1 (function as argument):

// func apply(fn func(int) int, x int) int {
//     return fn(x) // fn рж╣рж▓рзЛ function parameter
// }

// func square(n int) int {
//     return n * n
// }

// func main() {
//     result := apply(square, 5) // square function ржХрзЗ argument ржжрж┐рж▓рж╛ржо
//     fmt.Println(result)        // 25
// }


// ЁЯУМ Example 2 (function return ржХрж░рж╛):

// func multiplier(factor int) func(int) int {
//     return func(x int) int {
//         return x * factor
//     }
// }

// func main() {
//     double := multiplier(2) // ржПржХржЯрж╛ function return ржХрж░рж▓рзЛ
//     fmt.Println(double(10)) // 20
// }

// тЬЕ Summary

// Parameter = function definition ржП input variable ржирж╛ржо

// Argument = function call ржХрж░рж╛рж░ рж╕ржорзЯ ржжрзЗрзЯрж╛ actual value

// First-order Function = рж╕рж╛ржзрж╛рж░ржг function, рж╢рзБржзрзБ value ржирзЗрзЯ/ржлрзЗрж░ржд ржжрзЗрзЯ

// Higher-order Function = function ржирзЗрзЯ ржмрж╛ function ржлрзЗрж░ржд ржжрзЗрзЯ
package main
import "fmt"

// Parameter vs Argument demo
func greet(name string) { // "name" рж╣рж▓рзЛ parameter
    fmt.Println("Hello,", name)
}

// First-order function
func add(a int, b int) int {
    return a + b
}

// Higher-order function (function as argument)
func apply(fn func(int) int, x int) int {
    return fn(x) // fn рж╣рж▓рзЛ function parameter
}

func square(n int) int {
    return n * n
}

// Higher-order function (returning function)
func multiplier(factor int) func(int) int {
    return func(x int) int {
        return x * factor
    }
}

func main() {
    // Parameter vs Argument
    greet("Rahat") // "Rahat" рж╣рж▓рзЛ argument

    // First-order function
    result1 := add(5, 10)
    fmt.Println("add result:", result1)

    // Higher-order (function as argument)
    result2 := apply(square, 5)
    fmt.Println("apply(square, 5):", result2)

    // Higher-order (function returning function)
    double := multiplier(2)
    fmt.Println("multiplier(2)(10):", double(10))
}


// First Order Function Vs Higher Order Function

// Hello, Rahat
// add result: 15
// apply(square, 5): 25
// multiplier(2)(10): 20
ЁЯФ╣ Step by Step Flow (Simulation)
1. Program рж╢рзБрж░рзБ

ЁЯСЙ ржпржЦржи go run ржжрж┐рзЯрзЗ рж░рж╛ржи ржХрж░ржмрзЗ, Go runtime ржкрзНрж░ржержорзЗ рждрзЛржорж╛рж░ package (main) load ржХрж░рзЗред
main() function ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ, ржПржмржВ execution рж╕рзЗржЦрж╛ржи ржерзЗржХрзЗ рж╢рзБрж░рзБ рж╣рзЯред

2. Function Definitions

ржкрзНрж░ржержорзЗ compiler рж╕ржм function (greet, add, apply, square, multiplier) register ржХрж░рзЗ ржирзЗрзЯред
ржХрж┐ржирзНрждрзБ ржПржЧрзБрж▓рзЛ ржПржЦржирзЛ execute рж╣рзЯ ржирж╛, рж╢рзБржзрзБ store рж╣рзЯрзЗ ржерж╛ржХрзЗред

3. func main()

Execution ржПржЦрж╛ржирзЗ рж╢рзБрж░рзБ рж╣рзЯред

Line:
greet("Rahat")


Function call рж╣рж▓рзЛ greet("Rahat")

ржПржЦрж╛ржирзЗ "Rahat" рж╣рж▓рзЛ argument

Function definition ржП name string рж╣рж▓рзЛ parameter

рждрж╛ржЗ ржнрзЗрждрж░рзЗ ржпрж╛ржмрзЗ тЖТ

fmt.Println("Hello,", name)


Output:

Hello, Rahat

Next:
result1 := add(5, 10)


Call рж╣рж▓рзЛ add(5, 10)

Parameters: a=5, b=10

Function ржнрзЗрждрж░рзЗ тЖТ

return a + b // return 15


рждрж╛ржЗ result1 ржП store рж╣рж▓рзЛ 15

Print рж╣ржмрзЗ:

add result: 15

Next:
result2 := apply(square, 5)


Call рж╣рж▓рзЛ apply(square, 5)

Parameters: fn = square, x = 5

Function apply ржнрзЗрждрж░рзЗ ржпрж╛ржмрзЗ тЖТ

return fn(x) // ржПржЦрж╛ржирзЗ fn = square


So square(5) call рж╣ржмрзЗ тЖТ

return 5 * 5 // 25


Result = 25

Print рж╣ржмрзЗ:

apply(square, 5): 25

Next:
double := multiplier(2)


Call рж╣рж▓рзЛ multiplier(2)

Parameter: factor = 2

Function multiplier return ржХрж░ржЫрзЗ ржПржХржЯрж╛ ржирждрзБржи function:

return func(x int) int {
    return x * factor // ржПржЦрж╛ржирзЗ factor=2 bind рж╣рзЯрзЗ ржЧрзЗржЫрзЗ (closure)
}


рждрж╛ржЗ double ржПржЦржи ржПржХржЯрж╛ function, ржпрж╛ input ржирж┐рж▓рзЗ рж╕рзЗржЯрж╛ 2 ржжрж┐рзЯрзЗ ржЧрзБржи ржХрж░ржмрзЗред

Next:
fmt.Println(double(10))


double(10) call рж╣рж▓рзЛ тЖТ

ржЖрж╕рж▓рзЗ ржПржЯрж╛ рж╣рж▓рзЛ рж╕рзЗржЗ returned function:

return 10 * 2 // 20


Output рж╣ржмрзЗ:

multiplier(2)(10): 20

ЁЯФ╣ Final Output (ржкрзБрж░рзЛ flow рж╢рзЗрж╖рзЗ)
Hello, Rahat
add result: 15
apply(square, 5): 25
multiplier(2)(10): 20

тЬЕ Concept Recap

Parameter = function define ржХрж░рж╛рж░ рж╕ржорзЯ ржпрзЗ ржирж╛ржо ржжрзЗржУрзЯрж╛ рж╣рзЯ (placeholder)

Argument = function call ржХрж░рж╛рж░ рж╕ржорзЯ ржпрзЗ actual value ржжрзЗржУрзЯрж╛ рж╣рзЯ

First-order function = add() (рж╢рзБржзрзБ value ржирзЗрзЯ, value ржлрзЗрж░ржд ржжрзЗрзЯ)

Higher-order function (takes function as arg) = apply(square, 5)

Higher-order function (returns function) = multiplier(2) тЖТ return ржХрж░рж▓рзЛ ржПржХржЯрж╛ ржирждрзБржи function